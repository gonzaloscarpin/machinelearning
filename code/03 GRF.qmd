---
title: "Random forest"
format: html
---

# Setup  
```{r}
#| message: false
#| warning: false
library(tidyverse)
library(tidymodels)
library(vip)
library(sf)
library(finetune)
library(SpatialML)
library(grf)
```

# 1) M + W + S + O
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, planting_date:variety, 
                row_pattern:saved_seed, 
                lat, lon, 
                stage_duration_emergence:stage_vp_total,
                river_basin, soil_series,
                soil_clay_0_5:soil_theta_s_30_60,
                NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ planting_date + digger_date + growing_season + variety + row_pattern +  
             irrigation + saved_seed + lat + lon + stage_duration_emergence +  
             stage_duration_vegetative_stage + stage_duration_reproductive_stage +  
             stage_duration_total + stage_acu_radsolar_emergence +  
             stage_acu_radsolar_vegetative_stage + stage_acu_radsolar_reproductive_stage +  
             stage_acu_radsolar_total + stage_acu_gdd_emergence +  
             stage_acu_gdd_vegetative_stage + stage_acu_gdd_reproductive_stage +  
             stage_acu_gdd_total + stage_acu_pp_emergence + stage_acu_pp_vegetative_stage +  
             stage_acu_pp_reproductive_stage + stage_acu_pp_total + stage_tmed_emergence +  
             stage_tmed_vegetative_stage + stage_tmed_reproductive_stage + stage_tmed_total +  
             stage_tmin_emergence + stage_tmin_vegetative_stage +  
             stage_tmin_reproductive_stage + stage_tmin_total + stage_tmax_emergence +  
             stage_tmax_vegetative_stage + stage_tmax_reproductive_stage + stage_tmax_total +  
             stage_vp_emergence + stage_vp_vegetative_stage +  
             stage_vp_reproductive_stage + stage_vp_total + river_basin + soil_series +  
             soil_clay_0_5 + soil_clay_5_15 + soil_clay_15_30 + soil_clay_30_60 +  
             soil_ksat_0_5 + soil_ksat_5_15 + soil_ksat_15_30 + soil_ksat_30_60 +  
             soil_om_0_5 + soil_om_5_15 + soil_om_15_30 + soil_om_30_60 + soil_ph_0_5 +  
             soil_ph_5_15 + soil_ph_15_30 + soil_ph_30_60 + soil_sand_0_5 +  
             soil_sand_5_15 + soil_sand_15_30 + soil_sand_30_60 + soil_silt_0_5 +  
             soil_silt_5_15 + soil_silt_15_30 + soil_silt_30_60 + soil_theta_s_0_5 +  
             soil_theta_s_5_15 + soil_theta_s_15_30 + soil_theta_s_30_60 + NDVI +  
             EVI + NDRE + GNDVI + elevation
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 25,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=69.5),
                        position_eq = c(x=76, y =71),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/M+W+S+O.png",
       width = 5,
       height = 5
       )
```

# 2) M + W + S
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, planting_date:variety, 
                row_pattern:saved_seed, 
                lat, lon, 
                stage_duration_emergence:stage_vp_total,
                river_basin, soil_series,
                soil_clay_0_5:soil_theta_s_30_60#,
                #NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ planting_date + digger_date + growing_season + variety + row_pattern +  
             irrigation + saved_seed + lat + lon + stage_duration_emergence +  
             stage_duration_vegetative_stage + stage_duration_reproductive_stage +  
             stage_duration_total + stage_acu_radsolar_emergence +  
             stage_acu_radsolar_vegetative_stage + stage_acu_radsolar_reproductive_stage +  
             stage_acu_radsolar_total + stage_acu_gdd_emergence +  
             stage_acu_gdd_vegetative_stage + stage_acu_gdd_reproductive_stage +  
             stage_acu_gdd_total + stage_acu_pp_emergence + stage_acu_pp_vegetative_stage +  
             stage_acu_pp_reproductive_stage + stage_acu_pp_total + stage_tmed_emergence +  
             stage_tmed_vegetative_stage + stage_tmed_reproductive_stage + stage_tmed_total +  
             stage_tmin_emergence + stage_tmin_vegetative_stage +  
             stage_tmin_reproductive_stage + stage_tmin_total + stage_tmax_emergence +  
             stage_tmax_vegetative_stage + stage_tmax_reproductive_stage + stage_tmax_total +  
             stage_vp_emergence + stage_vp_vegetative_stage +  
             stage_vp_reproductive_stage + stage_vp_total + river_basin + soil_series +  
             soil_clay_0_5 + soil_clay_5_15 + soil_clay_15_30 + soil_clay_30_60 +  
             soil_ksat_0_5 + soil_ksat_5_15 + soil_ksat_15_30 + soil_ksat_30_60 +  
             soil_om_0_5 + soil_om_5_15 + soil_om_15_30 + soil_om_30_60 + soil_ph_0_5 +  
             soil_ph_5_15 + soil_ph_15_30 + soil_ph_30_60 + soil_sand_0_5 +  
             soil_sand_5_15 + soil_sand_15_30 + soil_sand_30_60 + soil_silt_0_5 +  
             soil_silt_5_15 + soil_silt_15_30 + soil_silt_30_60 + soil_theta_s_0_5 +  
             soil_theta_s_5_15 + soil_theta_s_15_30 + soil_theta_s_30_60
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 25,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=72,y=71.5),
                        position_eq = c(x=76, y =71),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/M+W+S.png",
       width = 5,
       height = 5
       )
```

# 3) M + W + O
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, planting_date:variety, 
                row_pattern:saved_seed, 
                lat, lon, 
                stage_duration_emergence:stage_vp_total,
                river_basin, soil_series,
                #soil_clay_0_5:soil_theta_s_30_60,
                NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ planting_date + digger_date + growing_season + variety + row_pattern +  
             irrigation + saved_seed + lat + lon + stage_duration_emergence +  
             stage_duration_vegetative_stage + stage_duration_reproductive_stage +  
             stage_duration_total + stage_acu_radsolar_emergence +  
             stage_acu_radsolar_vegetative_stage + stage_acu_radsolar_reproductive_stage +  
             stage_acu_radsolar_total + stage_acu_gdd_emergence +  
             stage_acu_gdd_vegetative_stage + stage_acu_gdd_reproductive_stage +  
             stage_acu_gdd_total + stage_acu_pp_emergence + stage_acu_pp_vegetative_stage +  
             stage_acu_pp_reproductive_stage + stage_acu_pp_total + stage_tmed_emergence +  
             stage_tmed_vegetative_stage + stage_tmed_reproductive_stage + stage_tmed_total +  
             stage_tmin_emergence + stage_tmin_vegetative_stage +  
             stage_tmin_reproductive_stage + stage_tmin_total + stage_tmax_emergence +  
             stage_tmax_vegetative_stage + stage_tmax_reproductive_stage + stage_tmax_total +  
             stage_vp_emergence + stage_vp_vegetative_stage +  
             stage_vp_reproductive_stage + stage_vp_total + NDVI +  
             EVI + NDRE + GNDVI + elevation
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 25,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=74),
                        position_eq = c(x=76, y =71),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/M+W+O.png",
       width = 5,
       height = 5
       )
```

# 4) M + S + O
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, planting_date:variety, 
                row_pattern:saved_seed, 
                lat, lon, 
                #stage_duration_emergence:stage_vp_total,
                river_basin, soil_series,
                soil_clay_0_5:soil_theta_s_30_60,
                NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ planting_date + digger_date + growing_season + variety + row_pattern +  
             irrigation + saved_seed + lat + lon + river_basin + soil_series +  
             soil_clay_0_5 + soil_clay_5_15 + soil_clay_15_30 + soil_clay_30_60 +  
             soil_ksat_0_5 + soil_ksat_5_15 + soil_ksat_15_30 + soil_ksat_30_60 +  
             soil_om_0_5 + soil_om_5_15 + soil_om_15_30 + soil_om_30_60 + soil_ph_0_5 +  
             soil_ph_5_15 + soil_ph_15_30 + soil_ph_30_60 + soil_sand_0_5 +  
             soil_sand_5_15 + soil_sand_15_30 + soil_sand_30_60 + soil_silt_0_5 +  
             soil_silt_5_15 + soil_silt_15_30 + soil_silt_30_60 + soil_theta_s_0_5 +  
             soil_theta_s_5_15 + soil_theta_s_15_30 + soil_theta_s_30_60 + NDVI +  
             EVI + NDRE + GNDVI + elevation
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 25,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=69.5),
                        position_eq = c(x=76, y =71),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/M+S+O.png",
       width = 5,
       height = 5
       )
```

# 5) W + S + O
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, 
                #planting_date:variety, 
                #row_pattern:saved_seed, 
                lat, lon, 
                stage_duration_emergence:stage_vp_total,
                river_basin, soil_series,
                soil_clay_0_5:soil_theta_s_30_60,
                NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~  lat + lon + stage_duration_emergence +  
             stage_duration_vegetative_stage + stage_duration_reproductive_stage +  
             stage_duration_total + stage_acu_radsolar_emergence +  
             stage_acu_radsolar_vegetative_stage + stage_acu_radsolar_reproductive_stage +  
             stage_acu_radsolar_total + stage_acu_gdd_emergence +  
             stage_acu_gdd_vegetative_stage + stage_acu_gdd_reproductive_stage +  
             stage_acu_gdd_total + stage_acu_pp_emergence + stage_acu_pp_vegetative_stage +  
             stage_acu_pp_reproductive_stage + stage_acu_pp_total + stage_tmed_emergence +  
             stage_tmed_vegetative_stage + stage_tmed_reproductive_stage + stage_tmed_total +  
             stage_tmin_emergence + stage_tmin_vegetative_stage +  
             stage_tmin_reproductive_stage + stage_tmin_total + stage_tmax_emergence +  
             stage_tmax_vegetative_stage + stage_tmax_reproductive_stage + stage_tmax_total +  
             stage_vp_emergence + stage_vp_vegetative_stage +  
             stage_vp_reproductive_stage + stage_vp_total + river_basin + soil_series +  
             soil_clay_0_5 + soil_clay_5_15 + soil_clay_15_30 + soil_clay_30_60 +  
             soil_ksat_0_5 + soil_ksat_5_15 + soil_ksat_15_30 + soil_ksat_30_60 +  
             soil_om_0_5 + soil_om_5_15 + soil_om_15_30 + soil_om_30_60 + soil_ph_0_5 +  
             soil_ph_5_15 + soil_ph_15_30 + soil_ph_30_60 + soil_sand_0_5 +  
             soil_sand_5_15 + soil_sand_15_30 + soil_sand_30_60 + soil_silt_0_5 +  
             soil_silt_5_15 + soil_silt_15_30 + soil_silt_30_60 + soil_theta_s_0_5 +  
             soil_theta_s_5_15 + soil_theta_s_15_30 + soil_theta_s_30_60 + NDVI +  
             EVI + NDRE + GNDVI + elevation
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 25,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=69.5),
                        position_eq = c(x=76, y =71),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/W+S+O.png",
       width = 5,
       height = 5
       )
```

# 6) M + W
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, planting_date:variety, 
                row_pattern:saved_seed, 
                lat, lon, 
                stage_duration_emergence:stage_vp_total#,
                #river_basin, soil_series,
                #soil_clay_0_5:soil_theta_s_30_60,
                #NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ planting_date + digger_date + growing_season + variety + row_pattern +  
             irrigation + saved_seed + lat + lon + stage_duration_emergence +  
             stage_duration_vegetative_stage + stage_duration_reproductive_stage +  
             stage_duration_total + stage_acu_radsolar_emergence +  
             stage_acu_radsolar_vegetative_stage + stage_acu_radsolar_reproductive_stage +  
             stage_acu_radsolar_total + stage_acu_gdd_emergence +  
             stage_acu_gdd_vegetative_stage + stage_acu_gdd_reproductive_stage +  
             stage_acu_gdd_total + stage_acu_pp_emergence + stage_acu_pp_vegetative_stage +  
             stage_acu_pp_reproductive_stage + stage_acu_pp_total + stage_tmed_emergence +  
             stage_tmed_vegetative_stage + stage_tmed_reproductive_stage + stage_tmed_total +  
             stage_tmin_emergence + stage_tmin_vegetative_stage +  
             stage_tmin_reproductive_stage + stage_tmin_total + stage_tmax_emergence +  
             stage_tmax_vegetative_stage + stage_tmax_reproductive_stage + stage_tmax_total +  
             stage_vp_emergence + stage_vp_vegetative_stage +  
             stage_vp_reproductive_stage + stage_vp_total
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 25,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=70.95),
                        position_eq = c(x=76, y =72),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/M+W.png",
       width = 5,
       height = 5
       )
```

# 7) M + S
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, planting_date:variety, 
                row_pattern:saved_seed, 
                lat, lon, 
                #stage_duration_emergence:stage_vp_total,
                river_basin, soil_series,
                soil_clay_0_5:soil_theta_s_30_60#,
                #NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ planting_date + digger_date + growing_season + variety + row_pattern +  
             irrigation + saved_seed + lat + lon + river_basin + soil_series +  
             soil_clay_0_5 + soil_clay_5_15 + soil_clay_15_30 + soil_clay_30_60 +  
             soil_ksat_0_5 + soil_ksat_5_15 + soil_ksat_15_30 + soil_ksat_30_60 +  
             soil_om_0_5 + soil_om_5_15 + soil_om_15_30 + soil_om_30_60 + soil_ph_0_5 +  
             soil_ph_5_15 + soil_ph_15_30 + soil_ph_30_60 + soil_sand_0_5 +  
             soil_sand_5_15 + soil_sand_15_30 + soil_sand_30_60 + soil_silt_0_5 +  
             soil_silt_5_15 + soil_silt_15_30 + soil_silt_30_60 + soil_theta_s_0_5 +  
             soil_theta_s_5_15 + soil_theta_s_15_30 + soil_theta_s_30_60
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 25,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=73,y=71.5),
                        position_eq = c(x=73, y =72),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/M+S.png",
       width = 5,
       height = 5
       )
```

# 8) M + O
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, planting_date:variety, 
                row_pattern:saved_seed, 
                lat, lon, 
                #stage_duration_emergence:stage_vp_total,
                #river_basin, soil_series,
                #soil_clay_0_5:soil_theta_s_30_60,
                NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ planting_date + digger_date + growing_season + variety + row_pattern +  
             irrigation + saved_seed + lat + lon + NDVI +  
             EVI + NDRE + GNDVI + elevation
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 5,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=73.5),
                        position_eq = c(x=76, y =71),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/M+O.png",
       width = 5,
       height = 5
       )
```

# 9) W + S
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, 
                #planting_date:variety, 
                #row_pattern:saved_seed, 
                lat, lon, 
                stage_duration_emergence:stage_vp_total,
                river_basin, soil_series,
                soil_clay_0_5:soil_theta_s_30_60#,
                #NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ lat + lon + stage_duration_emergence +  
             stage_duration_vegetative_stage + stage_duration_reproductive_stage +  
             stage_duration_total + stage_acu_radsolar_emergence +  
             stage_acu_radsolar_vegetative_stage + stage_acu_radsolar_reproductive_stage +  
             stage_acu_radsolar_total + stage_acu_gdd_emergence +  
             stage_acu_gdd_vegetative_stage + stage_acu_gdd_reproductive_stage +  
             stage_acu_gdd_total + stage_acu_pp_emergence + stage_acu_pp_vegetative_stage +  
             stage_acu_pp_reproductive_stage + stage_acu_pp_total + stage_tmed_emergence +  
             stage_tmed_vegetative_stage + stage_tmed_reproductive_stage + stage_tmed_total +  
             stage_tmin_emergence + stage_tmin_vegetative_stage +  
             stage_tmin_reproductive_stage + stage_tmin_total + stage_tmax_emergence +  
             stage_tmax_vegetative_stage + stage_tmax_reproductive_stage + stage_tmax_total +  
             stage_vp_emergence + stage_vp_vegetative_stage +  
             stage_vp_reproductive_stage + stage_vp_total + river_basin + soil_series +  
             soil_clay_0_5 + soil_clay_5_15 + soil_clay_15_30 + soil_clay_30_60 +  
             soil_ksat_0_5 + soil_ksat_5_15 + soil_ksat_15_30 + soil_ksat_30_60 +  
             soil_om_0_5 + soil_om_5_15 + soil_om_15_30 + soil_om_30_60 + soil_ph_0_5 +  
             soil_ph_5_15 + soil_ph_15_30 + soil_ph_30_60 + soil_sand_0_5 +  
             soil_sand_5_15 + soil_sand_15_30 + soil_sand_30_60 + soil_silt_0_5 +  
             soil_silt_5_15 + soil_silt_15_30 + soil_silt_30_60 + soil_theta_s_0_5 +  
             soil_theta_s_5_15 + soil_theta_s_15_30 + soil_theta_s_30_60
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 25,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=71.5),
                        position_eq = c(x=76, y =72),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/W+S.png",
       width = 5,
       height = 5
       )
```

# 10) W + O
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, 
                #planting_date:variety, 
                #row_pattern:saved_seed, 
                lat, lon, 
                stage_duration_emergence:stage_vp_total,
                #river_basin, soil_series,
                #soil_clay_0_5:soil_theta_s_30_60,
                NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ lat + lon + stage_duration_emergence +  
             stage_duration_vegetative_stage + stage_duration_reproductive_stage +  
             stage_duration_total + stage_acu_radsolar_emergence +  
             stage_acu_radsolar_vegetative_stage + stage_acu_radsolar_reproductive_stage +  
             stage_acu_radsolar_total + stage_acu_gdd_emergence +  
             stage_acu_gdd_vegetative_stage + stage_acu_gdd_reproductive_stage +  
             stage_acu_gdd_total + stage_acu_pp_emergence + stage_acu_pp_vegetative_stage +  
             stage_acu_pp_reproductive_stage + stage_acu_pp_total + stage_tmed_emergence +  
             stage_tmed_vegetative_stage + stage_tmed_reproductive_stage + stage_tmed_total +  
             stage_tmin_emergence + stage_tmin_vegetative_stage +  
             stage_tmin_reproductive_stage + stage_tmin_total + stage_tmax_emergence +  
             stage_tmax_vegetative_stage + stage_tmax_reproductive_stage + stage_tmax_total +  
             stage_vp_emergence + stage_vp_vegetative_stage +  
             stage_vp_reproductive_stage + stage_vp_total + NDVI +  
             EVI + NDRE + GNDVI + elevation
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 25,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=73.5),
                        position_eq = c(x=76, y =71),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/W+O.png",
       width = 5,
       height = 5
       )
```

# 11) S + O
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, 
                #planting_date:variety, 
                #row_pattern:saved_seed, 
                lat, lon, 
                #stage_duration_emergence:stage_vp_total,
                river_basin, soil_series,
                soil_clay_0_5:soil_theta_s_30_60,
                NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ river_basin + soil_series +  
             soil_clay_0_5 + soil_clay_5_15 + soil_clay_15_30 + soil_clay_30_60 +  
             soil_ksat_0_5 + soil_ksat_5_15 + soil_ksat_15_30 + soil_ksat_30_60 +  
             soil_om_0_5 + soil_om_5_15 + soil_om_15_30 + soil_om_30_60 + soil_ph_0_5 +  
             soil_ph_5_15 + soil_ph_15_30 + soil_ph_30_60 + soil_sand_0_5 +  
             soil_sand_5_15 + soil_sand_15_30 + soil_sand_30_60 + soil_silt_0_5 +  
             soil_silt_5_15 + soil_silt_15_30 + soil_silt_30_60 + soil_theta_s_0_5 +  
             soil_theta_s_5_15 + soil_theta_s_15_30 + soil_theta_s_30_60 + NDVI +  
             EVI + NDRE + GNDVI + elevation
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 10,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=69.5),
                        position_eq = c(x=76, y =70.6),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/S+O.png",
       width = 5,
       height = 5
       )
```

# 12) M 
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, planting_date:variety, 
                row_pattern:saved_seed, 
                lat, lon#, 
                #stage_duration_emergence:stage_vp_total,
                #river_basin, soil_series,
                #soil_clay_0_5:soil_theta_s_30_60,
                #NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ planting_date + digger_date + growing_season + variety + row_pattern +  
             irrigation + saved_seed + lat + lon 
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 3,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=71.5),
                        position_eq = c(x=76, y =72.4),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/M.png",
       width = 5,
       height = 5
       )
```

# 13) W
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, 
                #planting_date:variety, 
                #row_pattern:saved_seed, 
                lat, lon, 
                stage_duration_emergence:stage_vp_total#,
                #river_basin, soil_series,
                #soil_clay_0_5:soil_theta_s_30_60,
                #NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ lat + lon + stage_duration_emergence +  
             stage_duration_vegetative_stage + stage_duration_reproductive_stage +  
             stage_duration_total + stage_acu_radsolar_emergence +  
             stage_acu_radsolar_vegetative_stage + stage_acu_radsolar_reproductive_stage +  
             stage_acu_radsolar_total + stage_acu_gdd_emergence +  
             stage_acu_gdd_vegetative_stage + stage_acu_gdd_reproductive_stage +  
             stage_acu_gdd_total + stage_acu_pp_emergence + stage_acu_pp_vegetative_stage +  
             stage_acu_pp_reproductive_stage + stage_acu_pp_total + stage_tmed_emergence +  
             stage_tmed_vegetative_stage + stage_tmed_reproductive_stage + stage_tmed_total +  
             stage_tmin_emergence + stage_tmin_vegetative_stage +  
             stage_tmin_reproductive_stage + stage_tmin_total + stage_tmax_emergence +  
             stage_tmax_vegetative_stage + stage_tmax_reproductive_stage + stage_tmax_total +  
             stage_vp_emergence + stage_vp_vegetative_stage +  
             stage_vp_reproductive_stage + stage_vp_total
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 11,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=71),
                        position_eq = c(x=76, y =72.5),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/W.png",
       width = 5,
       height = 5
       )
```

# 14) S
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, 
                #planting_date:variety, 
                #row_pattern:saved_seed, 
                lat, lon, 
                #stage_duration_emergence:stage_vp_total,
                river_basin, soil_series,
                soil_clay_0_5:soil_theta_s_30_60#,
                #NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ lat + lon + river_basin + soil_series +  
             soil_clay_0_5 + soil_clay_5_15 + soil_clay_15_30 + soil_clay_30_60 +  
             soil_ksat_0_5 + soil_ksat_5_15 + soil_ksat_15_30 + soil_ksat_30_60 +  
             soil_om_0_5 + soil_om_5_15 + soil_om_15_30 + soil_om_30_60 + soil_ph_0_5 +  
             soil_ph_5_15 + soil_ph_15_30 + soil_ph_30_60 + soil_sand_0_5 +  
             soil_sand_5_15 + soil_sand_15_30 + soil_sand_30_60 + soil_silt_0_5 +  
             soil_silt_5_15 + soil_silt_15_30 + soil_silt_30_60 + soil_theta_s_0_5 +  
             soil_theta_s_5_15 + soil_theta_s_15_30 + soil_theta_s_30_60
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 12,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=71.5),
                        position_eq = c(x=76, y =72.5),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/S.png",
       width = 5,
       height = 5
       )
```

# 15) O
# Yield
```{r }
df <- read_sf("../data/data_complete.geojson") %>% 
  st_drop_geometry() %>% 
  as.data.frame() %>% 
  dplyr::select(planting_date, digger_date, growing_season, variety, river_basin, soil_series, row_pattern, 
                irrigation, saved_seed, 
                tillage_method=tillage_method_simplify,
                rotation = rotation_simplify_years_wo_peanut, seeding_rate, 
                grade_n, 
                alt, stage_duration_emergence:elevation,
                lat= lat.y, lon = long
                ) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate(rotation = as.factor(rotation)) %>% 
  dplyr::select(-(c(alt, rotation, seeding_rate, tillage_method))) %>% 
  dplyr::select(!(c(soil_alpha_0_5:soil_bd_30_60, 
                    soil_hb_0_5:soil_hb_30_60, 
                    soil_lambda_0_5:soil_n_30_60,
                    soil_theta_r_0_5:soil_theta_r_30_60
                    ))) %>%
  #dplyr::select(-(c("lat", "lon"))) %>% 
  
  dplyr::select(-(c(SCI:NGRDI))) %>% 
  dplyr::select(grade_n, 
                #planting_date:variety, 
                #row_pattern:saved_seed, 
                lat, lon, 
                #stage_duration_emergence:stage_vp_total,
                #river_basin, soil_series,
                #soil_clay_0_5:soil_theta_s_30_60,
                NDVI:elevation
                ) %>% 
  #dplyr::select(-(c(NDVI:GNDVI, elevation))) %>% 
  drop_na() %>% dplyr::filter(grade_n > 65) 

df

# df <- read_csv("../data/df.csv") %>%
#   distinct(n_field, .keep_all = T) %>% 
#   dplyr::select(river_basin, variety, irrigation, saved_seed, soil_series, grade_n) %>% 
#   drop_na() %>% dplyr::filter(grade_n > 65)
```

# ML workflow  
We're going to use the same workflow as we used for elastic net.   

## 1. Pre-processing  
Here's where we perform **data split** and **data processing**.  

### a. Data split  
For data split, let's use **70% training / 30% testing**.

```{r weather_split}
# Setting seed to get reproducible results  
set.seed(27)
weather_split <- initial_split(df, prop = 0.7, 
                               strata = "grade_n")
weather_split
```


```{r weather_train}
# Setting train set 
weather_train <- training(weather_split)

weather_train
```
How many observations?

```{r weather_test}
# Setting test split
weather_test <- testing(weather_split) 

weather_test
```
How many observations?  

Now, we put our **test set** aside and continue with our **train set** for training.  

```{r plot distribution}
# Combine the data frames
plot_train <- weather_train %>% mutate(Dataset = "Train")
plot_test <- weather_test %>% mutate(Dataset = "Test")
combined_data <- bind_rows(plot_train, plot_test)

# Create the density plot
ggplot(data = combined_data) +
  geom_density(aes(x = grade_n, fill = Dataset), alpha = 0.5) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(x = "Yield (kg/ha)", y = "Density", fill = "Dataset")
```

```{r formula}
formula <- grade_n ~ lat + lon + NDVI +  
             EVI + NDRE + GNDVI + elevation
```

## 2. Model
```{r fitting model}
# Train the model using weather_train data
grf_model <- grf(
  formula = formula,
  dframe = weather_train,
  bw = 10,
  kernel = "fixed",
  coords = cbind(weather_train$lon, 
                 weather_train$lat),
  ntree = 350,
  mtry = 3,
  importance = "impurity",
  geo.weighted = T,
  print.results = T
)
```

## 3. Making predictions
```{r predictions}
# Make predictions
predictions <- predict.grf(grf_model, 
                           new.data = weather_test,
                           x.var.name = "lon",
                           y.var.name = "lat") %>% 
  as.data.frame() %>% 
  dplyr::select(predicted = ".") %>% 
  mutate(row_number = row_number())

weather_test <- weather_test %>%
  mutate(row_number = row_number())
  
comparison <- weather_test %>% 
  left_join(predictions) %>% 
  dplyr::select(row_number, grade_n, predicted)
```

### plot
```{r}
plot <- metrica::scatter_plot(obs = comparison$grade_n,
                        pred = comparison$predicted,
                        print_eq = T,
                        print_metrics = T,
                      position_metrics = c(x=76,y=73),
                        position_eq = c(x=73, y =71),
                        metrics_list = c("R2", "RMSE", "MSE")
                      # Customize metrics position
                        )

plot
```

```{r export first plot}
ggsave(plot = plot,
       filename = "../output/ML_Grade/17_GRF/O.png",
       width = 5,
       height = 5
       )
```
